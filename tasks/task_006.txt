# Task ID: 6
# Title: Implement Rent Payment & Passing Go Bonus
# Status: todo
# Dependencies: 3, 4, 5
# Priority: high
# Description: Implement the logic for players paying rent when landing on owned properties and receiving money for passing the Go square.
# Details:
Add two key monetary flows: collecting $200 (or configured amount) when passing Go during movement, and transferring money between players when landing on a property owned by someone else. Handle basic cases where rent cannot be paid (bankruptcy).

# Test Strategy:
Pass Go: Move a player token across the Go square boundary. Verify player money increases by the correct amount ($200). Ensure this doesn't trigger if sent directly to Jail.
Land on Owned Property: Move player A onto a property owned by player B. Verify player A's money decreases by the base rent amount. Verify player B's money increases by the same amount.
Land on Own Property: Verify no rent is paid.
Land on Mortgaged Property (Future): Verify no rent is paid. (Defer mortgage logic).
Insufficient Funds: Player A lands on Player B's property but has less money than the rent. Verify a bankruptcy condition is triggered (e.g., player marked inactive, money potentially transferred partially - simplify for now).

# Subtasks:
## 6.1 Implement Passing Go Logic [todo]
### Dependencies: 3.2, 4.2
### Description: Award money when a player's move completes across the Go square.
### Details:
Modify the movePlayer function (Task 4.2).
Before updating the position, store the oldPosition.
After calculating newPosition, check if newPosition < oldPosition (and ensure they weren't sent to jail). This indicates passing Go.
If passed Go, add the specified amount (e.g., $200) to the player's money in the state.
Consider edge cases like landing exactly on Go. (Rules usually state you collect only when passing).

## 6.2 Implement Rent Calculation Logic [todo]
### Dependencies: 2.1, 3.2, 5.1
### Description: Determine the rent amount for a given property.
### Details:
Create a function calculateRent(squareData, ownerPlayerState) -> number.
For now, return the base rent value from the squareData.
(Future): This function will later incorporate house/hotel rules, monopolies, railroad/utility multipliers.

## 6.3 Implement Rent Payment Action [todo]
### Dependencies: 3.2, 5.1, 6.2
### Description: Handle the transaction when a player lands on an owned property.
### Details:
In the landing action dispatcher (Task 5.1), if the square is 'property' and owned by another player:
Get the owner player's state.
Calculate the rent using calculateRent.
Get the current player's state.
Check for Bankruptcy: If currentPlayer.money < rentAmount:
Trigger bankruptcy logic (Subtask 6.4).
Process Payment: If affordable:
Deduct rentAmount from currentPlayer.money.
Add rentAmount to ownerPlayer.money.
Update both players' states.
Display a notification (e.g., using shadcn Toast) indicating who paid whom and how much.

## 6.4 Implement Basic Bankruptcy Handling [todo]
### Dependencies: 3.2, 6.3
### Description: Handle the situation where a player cannot afford to pay rent or other fees.
### Details:
Create a function handleBankruptcy(debtorPlayerId, creditorPlayerId, amountOwed).
For this initial version:
Mark the debtorPlayer as inactive (e.g., add an isActive: false flag to the player state).
Transfer all remaining money from the debtor to the creditor (or the bank if owed to the bank).
Forfeit all properties owned by the debtor (clear propertiesOwned, update ownership state to unowned or bank-owned - simplify as unowned for now).
(Future): Implement asset selling/mortgaging before declaring bankruptcy.
Update the UI to reflect inactive players (e.g., grey out PlayerInfo, remove token). 